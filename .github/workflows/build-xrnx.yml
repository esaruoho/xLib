name: Package xLib as .XRNX

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  package-and-release:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository (no submodules)
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: false

      # 2. Checkout cLib repository and copy classes
      - name: Checkout cLib repository
        uses: actions/checkout@v2
        with:
          repository: esaruoho/cLib
          path: clib-temp
          submodules: false

      # 3. Checkout vLib repository and copy classes
      - name: Checkout vLib repository
        uses: actions/checkout@v2
        with:
          repository: esaruoho/vLib
          path: vlib-temp
          submodules: false

      # 4. Copy cLib, vLib, and xLib classes to xLib source directories
      - name: Copy cLib, vLib, and xLib classes
        run: |
          mkdir -p source/cLib/classes
          mkdir -p source/vLib/classes
          mkdir -p source/xLib/classes
          cp -r clib-temp/classes/* source/cLib/classes/
          cp -r vlib-temp/classes/* source/vLib/classes/
          cp -r classes/* source/xLib/classes/
          rm -rf clib-temp vlib-temp

      # 5. Fail if any .lua file contains forbidden tokens
      - name: Check Lua for forbidden tokens
        run: |
          if grep -R -n -E 'goto continue|::continue::' --include '*.lua' .; then
            echo "::error::Forbidden token found in Lua files. Please remove 'goto continue' or '::continue::'."
            exit 1
          fi

      # 6. Generate a timestamp-based tag and filename
      - name: Generate Tag and Filename
        run: |
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "TAG_NAME=$TIMESTAMP" >> $GITHUB_ENV
          echo "FILENAME=com.renoise.xLib_${TIMESTAMP}.xrnx" >> $GITHUB_ENV

      # 7. Zip the package using the dynamic filename
      - name: Zip XRNX Package
        run: |
          zip -r "${{ env.FILENAME }}" . \
            -x "*.git*" "*.github*"

      # 8. Create and push the Git tag
      - name: Create and Push Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

      # 9. Create a GitHub release for that tag
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      # 10. Upload the dynamically named .xrnx asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.FILENAME }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/octet-stream
